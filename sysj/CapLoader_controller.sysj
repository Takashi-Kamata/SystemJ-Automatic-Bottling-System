CapLoader_Controller(
		input signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty,request_caploader;
		output signal pusherExtend,vacOn,armSource,armDest;
		input Integer signal mode;
		input signal pusherExtendM,vacOnM,armSourceM,armDestM;
		)
->{
/* TODO: Write control-logic */
		class GUI implements java.lang.Runnable {
			public void run() {
				org.compsys704.CapLoader.main(null);
			}
		}
		new Thread(new GUI()).start();
			
		signal manual_signal;
		
		{
			while (true) {
				present(request_caploader) {
					
				System.out.println("CAPAPP");
				}
				pause;
			}
		}
		||
		{
			int modeint = 0;
			while (true) {
				present(mode) {
					modeint = #mode;
					
					if (modeint == 1) {
						emit manual_signal;
					}
				
				
				}
				pause;
			}
		
		}
		||
		/* PUSHER */
		{			
			while(true) {	
				present (!manual_signal) {
					present(request_caploader && !empty && !armAtSource){
						System.out.println("request_caploader");
						
						abort(pusherExtended) {
							sustain pusherExtend;
						}	
					}
				}
				pause;
			}
			
		}
		|| /* ARM */
		{
			while(true) {
				present (!manual_signal) {	
					present(pusherExtended){
						System.out.println("pusherExtended");
						abort(WPgripped) {
							sustain armSource;
							System.out.println("armSource");
						} 
						
					}
					present (WPgripped){
						abort(!WPgripped) {
							sustain armDest;
						}
					}
				}
				pause;
			}
			
		}
		|| /* GRIPPER */
		{
			while(true) {
				present (!manual_signal) {
					present(armAtSource) {
						abort(armAtDest) {
							sustain vacOn;
							System.out.println("vacOn");
						}
					}
				}
				pause;
			}
		}
		||
		{ /* manual mode */
			while (true) {
				present (manual_signal) {
					{while (true) {
						present (pusherExtendM){
							abort (!pusherExtendM) {
								emit pusherExtend;
							}
						}
						pause;	
					}}
					||{
					while (true) {
						present(vacOnM){
							abort (!vacOnM) {
								emit vacOn;
							}
							
						}
						pause;	
					}}
					||{
					while (true) {
						present(armSourceM){
							abort (!armSourceM) {
								emit armSource;
							}
						}
						pause;
					}}
					||{
					while (true) {
						present(armDestM){
							abort (!armDestM) {
								emit armDest;
							}
						}
						pause;
					}}					
				}
				pause;
			}
		}		
		||
		{
		System.out.println("Starting");
			while (true) {
				present(manual_signal){
/*					System.out.println("manual_signal"); */
				}
				pause;
			}
		}
		

}